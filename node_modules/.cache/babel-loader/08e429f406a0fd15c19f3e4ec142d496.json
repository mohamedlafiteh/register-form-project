{"ast":null,"code":"var _jsxFileName = \"/home/mohamed/register-form-project/src/components/RegisterForm.js\";\nimport React from \"react\";\nimport { NameAndPhone } from \"./steps/NameAndPhone\";\nimport { EmailAndDob } from \"./steps/EmailAndDob\";\nimport { Confirmation } from \"./steps/Confirmation\";\nimport { Submit } from \"./steps/Submit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class RegisterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: {},\n      step: 1,\n      fields: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phoneNumber: \"\",\n        dob: \"\"\n      }\n    };\n\n    this.nextStep = () => {\n      const {\n        step\n      } = this.state;\n\n      if (this.handleValidation()) {\n        this.setState({\n          step: step + 1\n        });\n      }\n    };\n\n    this.previousStep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleChange = field => e => {\n      let fields = this.state.fields;\n      fields[field] = e.target.value;\n      this.setState({\n        fields\n      });\n      console.console.log(':---------------------------- HELLO ');\n    };\n  }\n\n  //This function validate all inputs\n  handleValidation() {\n    let fields = this.state.fields;\n    let errors = {};\n    let formIsValid = true; // This variable to check the steps to target the second page validation\n\n    let counter = this.state.step; //FirstName check\n\n    if (!fields[\"firstName\"]) {\n      formIsValid = false;\n      errors[\"firstNameEr\"] = \"First name cannot be empty\";\n    } else if (typeof fields[\"firstName\"] !== \"undefined\") {\n      if (!fields[\"firstName\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"firstNameEr\"] = \"Only letters accepted\";\n      }\n    } //lastName check\n\n\n    if (!fields[\"lastName\"]) {\n      formIsValid = false;\n      errors[\"lastNameEr\"] = \"Last name cannot be empty\";\n    } else if (typeof fields[\"lastName\"] !== \"undefined\") {\n      if (!fields[\"lastName\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"lastNameEr\"] = \"Only letters accepted\";\n      }\n    } //phone number check\n    //10 number allowed\n\n\n    if (!fields[\"phoneNumber\"]) {\n      formIsValid = false;\n      errors[\"phoneNumberEr\"] = \"Phone number cannot be empty\";\n    } else if (typeof fields[\"phoneNumber\"] !== \"undefined\") {\n      //10 numbers format\n      var phoneNu = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n\n      if (!fields[\"phoneNumber\"].match(phoneNu)) {\n        formIsValid = false;\n        errors[\"phoneNumberEr\"] = \"The numbers should be 10 digits\";\n      }\n    } //Email check\n\n\n    if (counter === 2) {\n      if (!fields[\"email\"]) {\n        formIsValid = false;\n        errors[\"emailEr\"] = \"Email Cannot be empty\";\n      } else if (typeof fields[\"email\"] !== \"undefined\") {\n        let lastAtPos = fields[\"email\"].lastIndexOf(\"@\");\n        let lastDotPos = fields[\"email\"].lastIndexOf(\".\");\n\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf(\"@@\") === -1 && lastDotPos > 2 && fields[\"email\"].length - lastDotPos > 2)) {\n          formIsValid = false;\n          errors[\"emailEr\"] = \"Email is not valid\";\n        }\n      } //dob check\n\n\n      if (!fields[\"dob\"]) {\n        formIsValid = false;\n        errors[\"dobEr\"] = \"Date of birth Cannot be empty\";\n      }\n\n      let dateOfBirth = this.state.fields.dob;\n      var optimizedBirthday = dateOfBirth.replace(/-/g, \"/\"); // //set date based on birthday at 01:00:00 hours GMT+0100 (CET)\n\n      var myBirthday = new Date(optimizedBirthday); // // set current day on 01:00:00 hours GMT+0100 (CET)\n\n      var currentDate = new Date().toJSON().slice(0, 10) + \" 01:00:00\"; // // calculate age comparing current date and birthday\n\n      var myAge = ~~((Date.now(currentDate) - myBirthday) / 31557600000);\n\n      if (myAge < 18) {\n        formIsValid = false;\n        errors[\"dobEr\"] = \"You are younger than 18\";\n      }\n    }\n\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  } // This function will increment the steps\n\n\n  render() {\n    const {\n      step,\n      errors\n    } = this.state;\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      dob\n    } = this.state.fields;\n    const values = {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      dob,\n      errors\n    };\n\n    switch (step) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(NameAndPhone, {\n          nextStep: this.nextStep,\n          handleChange: this.handleChange,\n          values: values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(EmailAndDob, {\n          nextStep: this.nextStep,\n          previousStep: this.previousStep,\n          handleChange: this.handleChange,\n          values: values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this);\n\n      case 3:\n        return /*#__PURE__*/_jsxDEV(Confirmation, {\n          nextStep: this.nextStep,\n          previousStep: this.previousStep,\n          values: values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this);\n\n      case 4:\n        return /*#__PURE__*/_jsxDEV(Submit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 16\n        }, this);\n\n      default:\n        console.log(\"error\");\n    }\n  }\n\n}\nexport default RegisterForm;","map":{"version":3,"sources":["/home/mohamed/register-form-project/src/components/RegisterForm.js"],"names":["React","NameAndPhone","EmailAndDob","Confirmation","Submit","RegisterForm","Component","state","errors","step","fields","firstName","lastName","email","phoneNumber","dob","nextStep","handleValidation","setState","previousStep","handleChange","field","e","target","value","console","log","formIsValid","counter","match","phoneNu","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","dateOfBirth","optimizedBirthday","replace","myBirthday","Date","currentDate","toJSON","slice","myAge","now","render","values"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NameAndPhone } from \"./steps/NameAndPhone\";\nimport { EmailAndDob } from \"./steps/EmailAndDob\";\nimport { Confirmation } from \"./steps/Confirmation\";\nimport { Submit } from \"./steps/Submit\";\n\nexport class RegisterForm extends React.Component {\n  state = {\n    errors: {},\n    step: 1,\n    fields: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      dob: \"\",\n    },\n  };\n\n  //This function validate all inputs\n  handleValidation() {\n    let fields = this.state.fields;\n    let errors = {};\n    let formIsValid = true;\n    // This variable to check the steps to target the second page validation\n    let counter = this.state.step;\n\n    //FirstName check\n    if (!fields[\"firstName\"]) {\n      formIsValid = false;\n      errors[\"firstNameEr\"] = \"First name cannot be empty\";\n    } else if (typeof fields[\"firstName\"] !== \"undefined\") {\n      if (!fields[\"firstName\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"firstNameEr\"] = \"Only letters accepted\";\n      }\n    }\n    //lastName check\n    if (!fields[\"lastName\"]) {\n      formIsValid = false;\n      errors[\"lastNameEr\"] = \"Last name cannot be empty\";\n    } else if (typeof fields[\"lastName\"] !== \"undefined\") {\n      if (!fields[\"lastName\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"lastNameEr\"] = \"Only letters accepted\";\n      }\n    }\n    //phone number check\n    //10 number allowed\n    if (!fields[\"phoneNumber\"]) {\n      formIsValid = false;\n      errors[\"phoneNumberEr\"] = \"Phone number cannot be empty\";\n    } else if (typeof fields[\"phoneNumber\"] !== \"undefined\") {\n      //10 numbers format\n      var phoneNu = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n\n      if (!fields[\"phoneNumber\"].match(phoneNu)) {\n        formIsValid = false;\n        errors[\"phoneNumberEr\"] = \"The numbers should be 10 digits\";\n      }\n    }\n    //Email check\n    if (counter === 2) {\n      if (!fields[\"email\"]) {\n        formIsValid = false;\n        errors[\"emailEr\"] = \"Email Cannot be empty\";\n      } else if (typeof fields[\"email\"] !== \"undefined\") {\n        let lastAtPos = fields[\"email\"].lastIndexOf(\"@\");\n        let lastDotPos = fields[\"email\"].lastIndexOf(\".\");\n\n        if (\n          !(\n            lastAtPos < lastDotPos &&\n            lastAtPos > 0 &&\n            fields[\"email\"].indexOf(\"@@\") === -1 &&\n            lastDotPos > 2 &&\n            fields[\"email\"].length - lastDotPos > 2\n          )\n        ) {\n          formIsValid = false;\n          errors[\"emailEr\"] = \"Email is not valid\";\n        }\n      }\n      //dob check\n      if (!fields[\"dob\"]) {\n        formIsValid = false;\n        errors[\"dobEr\"] = \"Date of birth Cannot be empty\";\n      }\n      let dateOfBirth = this.state.fields.dob;\n      var optimizedBirthday = dateOfBirth.replace(/-/g, \"/\");\n\n      // //set date based on birthday at 01:00:00 hours GMT+0100 (CET)\n      var myBirthday = new Date(optimizedBirthday);\n\n      // // set current day on 01:00:00 hours GMT+0100 (CET)\n      var currentDate = new Date().toJSON().slice(0, 10) + \" 01:00:00\";\n\n      // // calculate age comparing current date and birthday\n      var myAge = ~~((Date.now(currentDate) - myBirthday) / 31557600000);\n\n      if (myAge < 18) {\n        formIsValid = false;\n        errors[\"dobEr\"] = \"You are younger than 18\";\n      }\n    }\n\n    this.setState({ errors: errors });\n    return formIsValid;\n  }\n  // This function will increment the steps\n  nextStep = () => {\n    const { step } = this.state;\n    if (this.handleValidation()) {\n      this.setState({\n        step: step + 1,\n      });\n    }\n  };\n  // This function will decrement the steps\n  previousStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step - 1,\n    });\n  };\n  // This function handles the input text change\n  handleChange = (field) => (e) => {\n    let fields = this.state.fields;\n    fields[field] = e.target.value;\n    this.setState({ fields });\n    console.console.log(':---------------------------- HELLO ');\n  };\n\n  render() {\n    const { step, errors } = this.state;\n    const { firstName, lastName, email, phoneNumber, dob } = this.state.fields;\n    const values = { firstName, lastName, email, phoneNumber, dob, errors };\n\n    switch (step) {\n      case 1:\n        return (\n          <NameAndPhone\n            nextStep={this.nextStep}\n            handleChange={this.handleChange}\n            values={values}\n          />\n        );\n      case 2:\n        return (\n          <EmailAndDob\n            nextStep={this.nextStep}\n            previousStep={this.previousStep}\n            handleChange={this.handleChange}\n            values={values}\n          />\n        );\n      case 3:\n        return (\n          <Confirmation\n            nextStep={this.nextStep}\n            previousStep={this.previousStep}\n            values={values}\n          />\n        );\n      case 4:\n        return <Submit />;\n      default:\n        console.log(\"error\")\n    }\n  }\n}\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}